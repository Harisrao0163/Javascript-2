// CODE EXECUTION IN JAVASCRIPT......

//here,we study how JS execute our code....when we write a code then the Global Execution code will formed...
// and that Global EC(execution context) will be transfered to "this"...and the important thing is that the Global EC of Browser is different and Global EC of VSCODE or any other platform is different to each other..
// But, the Global EC of Browser is more Important bcz, it gives us the "window Object" value of "this"...
//Simply, the global EC is must....value ho ya na ho...ye lazmi hoga..and Javascript is a Single Threaded...
// Except Global EC their are more EC's...like Function EC...and other is Eval EC...when we study Mongo's..then their we will see Eval EC...
// The code Exection is done in Two phases...1) Memory Creation Phase 2) Execution Phase...
// In Memory CP, their is a apace allocated for Variables
// In Execution Phase, their is a space allocated like +,- etc or Mathematical values..

//  Example for Code Execution....

let val1 = 5
let val2 = 10
function addnum(num1 , num2) {
    let total = num1+num2
    return total
}
let result1 = addnum(val1 , val2)
let result2 = addnum(5,10)

// PROCESS....First Cycle...

//  1) First, Global Ec will formed and then allocate to "this"...
//  2) MEMORY PHASE,then, it will be just Placed in Memory CP...now, In  Memory CP all the variables will placed and gives then the value => "Undefined"
// like val1 => undefined , val2 => undefined
// now in a 3rd line like function line..we we can see "addnu"..and have assigned it a value like "(num1,num2)"...so,it will give it a value "definition" not Undefined..
// like, addnum => Defination...Because, we just Declare a Function not Execute a function.....
// and result1 => undefined , result2 => undefined ,bcz these are also variables...


// Second Cycle...3) Execution Phase

// in this phase, val1 is equal to 5 and val2 is equal to 10...this is execution....
// and addnum will not execute bcz, their is no value assigned in it.....

// but, when we go to result1 then here is a function we can "addnum"...so, whenever a function repeats a new Execution context is formed...
// in which New variable Environment + Execution Thread will form...and the process will occur from start like Memory phase then Exection Phase...but,
// important thing is that after the work is completed the new Execution context we have formed like"New variable Environment + Execution Thread" will be deleted...
// Now , val1 = num1 => 5 , val2 = num2 => 10...
// and their is a variable "total"...its value in memory phase is undefined but in Execution phase is 15...
// but the important thing is that their is a return syntax we have added in a function... so, the value of total is returned to Global Execution context....
// this same process will occur for "result2" variable....

// CALL STACK.....

// in call stack, the global EC is must....and when we add a method or function, it enters and executes and then leave....this same thing is for every function or method...
// but, if two or three functions or methods enters  over each other separately...then the last one which enters in last...will leaves first... "LIFO(last in first out)" => a short trick...
// but , if their is a function or method in another function then the parent one will first execute and then the child one..